JavaScript에서 함수는 프로그래밍에서 중요한 역할을 합니다. 이전에는 함수 선언 방식으로 일반적인 함수를 선언하였으나, 
ES6에서는 화살표 함수라는 새로운 함수 선언 방식이 추가되었습니다.

일반적인 함수와 화살표 함수의 가장 큰 차이점은 함수 선언 방식입니다. 
일반적인 함수는 function 키워드를 사용하여 함수를 선언하고, 함수 이름을 작성한 후 매개변수를 괄호 안에 나열합니다. 
이와 달리 화살표 함수는 const 키워드와 화살표 연산자(=>)를 사용하여 함수를 선언합니다. 화살표 함수는 함수 이름을 생략할 수 있으며, 
매개변수를 괄호 안에 나열하고, 함수 몸체를 화살표 연산자 오른쪽에 작성합니다.

두 번째로, this 바인딩의 동작 방식이 다릅니다. 일반적인 함수에서 this는 호출한 객체를 나타내는 반면, 
화살표 함수는 상위 스코프(함수가 선언된 곳)의 this를 사용합니다. 이러한 이유로, 
화살표 함수는 일반적인 함수보다 좀 더 예측 가능한 this 동작을 보여줍니다.

세 번째로, arguments 객체의 존재 유무입니다. 일반적인 함수는 호출할 때 전달된 인자를 arguments 객체로 참조할 수 있습니다. 
반면, 화살표 함수는 arguments 객체를 지원하지 않습니다. 대신, 나머지 매개변수(rest parameter)를 사용하여 인자 목록을 처리합니다.

네 번째로, 반환 값 처리 방식입니다. 일반적인 함수에서는 return 키워드를 사용하여 값을 반환합니다. 반면, 
화살표 함수는 단일 표현식을 반환하는 경우 자동으로 반환값으로 처리합니다. 
또한, 중괄호를 사용하여 함수 몸체를 작성한 경우 명시적으로 return 키워드를 사용해야 합니다.

마지막으로, 화살표 함수는 코드를 간결하고 읽기 쉽게 만들어줍니다. 
함수 몸체가 한 줄인 경우에는 괄호와 중괄호를 생략할 수 있습니다. 
이러한 간결한 문법은 함수형 프로그래밍 스타일을 지원하고, 코드의 가독성과 유지 보수성을 높여줍니다.

--funtion 예시--

function greet(name) {
  return "Hello, " + name + "!";
}

--arrow function 예시--

const greet = (name) => {
  return "Hello, " + name + "!";
}

--한줄로 작성된 코드 예시--

const greet = (name) => "Hello, " + name + "!";